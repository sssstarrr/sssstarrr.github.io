<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每天一个linux命令</title>
      <link href="/2024/07/07/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/07/07/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移到hexo的第一篇博文</title>
      <link href="/2024/07/07/%E8%BF%81%E7%A7%BB%E5%88%B0hexo%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
      <url>/2024/07/07/%E8%BF%81%E7%A7%BB%E5%88%B0hexo%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="迁移到hexo的第一篇博文"><a href="#迁移到hexo的第一篇博文" class="headerlink" title="迁移到hexo的第一篇博文"></a>迁移到hexo的第一篇博文</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先感谢你能来访问我的 Blog，这是我搭建的第一个博客网站，使用的是 CloudFlare Pages + Hexo 的形式搭建，从小白一路走了过来也挺不容易的 hhh，前前后后几分钟就能搭建完成了叭(反正我是捣鼓了非常久)，现在把它记录下来，将来也许会是一种怀念叭.</p><h2 id="使用-CloudFlare-Pages-和-Hexo-搭建自己的独立博客"><a href="#使用-CloudFlare-Pages-和-Hexo-搭建自己的独立博客" class="headerlink" title="使用 CloudFlare Pages 和 Hexo 搭建自己的独立博客"></a>使用 CloudFlare Pages 和 Hexo 搭建自己的独立博客</h2><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新建vue2项目</title>
      <link href="/2024/07/04/createvue2project/"/>
      <url>/2024/07/04/createvue2project/</url>
      
        <content type="html"><![CDATA[<div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><h2 id="vue-cli-建项目"><a href="#vue-cli-建项目" class="headerlink" title="vue-cli 建项目"></a>vue-cli 建项目</h2><p>1.安装脚手架 (已安装) <code>`npm i @vue/cli -g`</code> 2.创建项目 <code>`vue create project`</code></p><ul><li>选项</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset:</span><br><span class="line">  Default ([Vue 3] babel, eslint)</span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">&gt; Manually select features     选自定义</span><br></pre></td></tr></table></figure><ul><li>手动选择功能</li></ul><p>![Uploading file…]()</p><ul><li>选择vue的版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  3.x</span><br><span class="line">&gt; 2.x</span><br></pre></td></tr></table></figure><ul><li>是否使用history模式</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/391b215a088d074a0de0dbe02054ddc6.png" alt="image-20201025150602129"></p><ul><li>选择css预处理</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/cc1634ee028aa214a00714f84f1fd366.png" alt="image-20220629175133593"></p><ul><li><p>选择eslint的风格 （eslint <a href="https://so.csdn.net/so/search?q=%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83&spm=1001.2101.3001.7020">代码规范</a>的检验工具，检验代码是否符合规范）</p><p>比如：const age &#x3D; 18; &#x3D;&gt; 报错！多加了分号！后面有工具，一保存，全部<a href="https://so.csdn.net/so/search?q=%E6%A0%BC%E5%BC%8F%E5%8C%96&spm=1001.2101.3001.7020">格式化</a>成最规范的样子</p><p>第三个为无分号规范（标准化），目前最流行的一个规范</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e42bb35854967b0f0386a93895447414.png" alt="68294191856"></p><ul><li>选择校验的时机 （直接回车）</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/6022e3f8774f26e43ee33a2d558748c0.png" alt="68294193579"></p><ul><li><p>选择配置文件的生成方式 （直接回车）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cfa05ff461d48f98ce6263049b5e95ab.png" alt="68294194798"></p></li><li><p>是否保存预设，下次直接使用？ &#x3D;&gt; 不保存，输入 N</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ec76be3027f1a9131f6533762b056f50.png" alt="68294196155"></p><ul><li>等待安装，项目初始化完成</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/16ad113af54498d4a2c2304e96383169.png" alt="68294197476"></p><ul><li>启动项目</li></ul><p><code>`npm run serve`</code></p><h2 id="调整初始化目录结构"><a href="#调整初始化目录结构" class="headerlink" title="调整初始化目录结构"></a>调整初始化目录结构</h2><p>为了更好的实现后面的操作，我们把整体的目录结构做一些调整。</p><p>目标:</p><ol><li>删除初始化的一些默认文件</li><li>修改没删除的文件</li><li>新增我们需要的目录结构</li></ol><p>1.删除文件</p><ul><li>src&#x2F;assets&#x2F;logo.png</li><li>src&#x2F;components&#x2F;HelloWorld.vue</li><li>src&#x2F;views&#x2F;AboutView.vue</li><li>src&#x2F;views&#x2F;HomeView.vue</li></ul><p>2.修改文件</p><p><code>main.js</code> 不需要修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router/index.js</span><br></pre></td></tr></table></figure><p>删除默认的路由配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p>App.vue</p><p>3.新增目录</p><ul><li>src&#x2F;api 目录<ul><li>存储接口模块 (发送ajax请求接口的模块)</li></ul></li><li>src&#x2F;utils 目录<ul><li>存储一些工具模块 (自己封装的方法)</li></ul></li></ul><p>目录效果如下:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2bc120ed495fd216d0732b3b90b42b16.png" alt="image-20230616184644176"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站美化</title>
      <link href="/2024/07/02/%E7%BD%91%E7%AB%99%E7%BE%8E%E5%8C%96/"/>
      <url>/2024/07/02/%E7%BD%91%E7%AB%99%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong><em>想在网页上实现鼠标点击特效和网页背景特效吗？快来看看！</em></strong></p><p>鼠标点击特效<br>鼠标点击特效已经是被网络上各博主已经玩烂的东西了，不过笔者在此处还是想记录一下</p><p>笔者在这里给出两种鼠标点击特效：循环文字词语点击特效和随机二进制数字点击特效，二选一就行，效果如下</p><p>循环文字词语点击特效</p><p>随机二进制数字点击特效</p><p><img src="https://img.ssf-blog.icu/file/89e60dcd3c77f025d2e27.gif"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bdc27c269b6fbec5edb5a55c1e8290e5.gif"></p><p>在服务器上找到 WordPress 站点目录，如笔者的是 &#x2F;www&#x2F;wwwroot&#x2F;[站点文件名]</p><p>在目录底下找到 wp-content&#x2F;themes&#x2F;[WordPress使用的主题名称]&#x2F;header.php</p><p>在 <head> 和 </head> 之中添加以下代码：</p><p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.js&quot;&gt;&lt;/script&gt;</code></p><p>再在目录底下找到 wp-content&#x2F;themes&#x2F;[WordPress使用的主题名称]&#x2F;footer.php</p><p>在 </body> 之前添加这些代码：</p><h3 id="循环文字词语点击特效"><a href="#循环文字词语点击特效" class="headerlink" title="循环文字词语点击特效"></a>循环文字词语点击特效</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mouse effects show start--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var a_idx = 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">    $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">        var a = new Array(&quot;富强&quot;,&quot;民主&quot;,&quot;文明&quot;,&quot;和谐&quot;,&quot;自由&quot;,&quot;平等&quot;,&quot;公正&quot;,&quot;法治&quot;,&quot;爱国&quot;,&quot;敬业&quot;,&quot;诚信&quot;,&quot;友善&quot;);</span><br><span class="line">        var $i = $(&quot;&lt;span&gt;&lt;/span&gt;&quot;).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + 1) % a.length;</span><br><span class="line">        var x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            &quot;z-index&quot;: 99999,</span><br><span class="line">            &quot;top&quot;: y - 20,</span><br><span class="line">            &quot;left&quot;: x,</span><br><span class="line">            &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            &quot;color&quot;: &quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;//颜色随机</span><br><span class="line">            //&quot;#2299DD&quot;  //固定颜色</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            &quot;top&quot;: y - 180,</span><br><span class="line">            &quot;opacity&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        1500,</span><br><span class="line">        function() &#123;</span><br><span class="line">            $i.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--mouse effects show end--&gt;</span><br></pre></td></tr></table></figure><h3 id="随机二进制数字点击特效"><a href="#随机二进制数字点击特效" class="headerlink" title="随机二进制数字点击特效"></a><strong>随机二进制数字点击特效</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mouse effects show start--&gt;</span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    jQuery(document).ready(function($) &#123;  </span><br><span class="line">    var _click_count=0;  </span><br><span class="line">    $(&quot;body&quot;).bind(&quot;click&quot;,function(e)&#123;</span><br><span class="line">        var n=Math.round(Math.random()*100)+1;//生成100以内的随机数</span><br><span class="line">          if(n == 0) res= &#x27;0&#x27;;</span><br><span class="line">          var res = &#x27;&#x27;;  </span><br><span class="line">          while(n != 0) &#123;</span><br><span class="line">              res = n % 2 + res</span><br><span class="line">              n = parseInt(n / 2)</span><br><span class="line">          &#125;//将n转化为二进制数res</span><br><span class="line">        var $i=$(&quot;&lt;b&gt;&quot;).text(&quot;+&quot;+(res));</span><br><span class="line">        var x=e.pageX,y=e.pageY;//鼠标点击的坐标</span><br><span class="line">        $i.css(&#123;  </span><br><span class="line">            &quot;z-index&quot;:99999,  </span><br><span class="line">            &quot;top&quot;:y-15,  </span><br><span class="line">            &quot;left&quot;:x,  </span><br><span class="line">            &quot;position&quot;:&quot;absolute&quot;,  </span><br><span class="line">            &quot;color&quot;:&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;//颜色随机</span><br><span class="line">            //&quot;#2299DD&quot;  //固定颜色</span><br><span class="line">            &#125;);  </span><br><span class="line">            $(&quot;body&quot;).append($i);  </span><br><span class="line">            $i.animate(&#123;</span><br><span class="line">                &quot;top&quot;:y-180,</span><br><span class="line">                &quot;opacity&quot;:0</span><br><span class="line">                &#125;,  </span><br><span class="line">                1500,  </span><br><span class="line">                function()&#123;$i.remove();&#125;  </span><br><span class="line">            );  </span><br><span class="line">            e.stopPropagation();  </span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--mouse effects show end--&gt;</span><br></pre></td></tr></table></figure><h3 id="网页背景特效"><a href="#网页背景特效" class="headerlink" title="网页背景特效"></a>网页背景特效</h3><h4 id="粒子特效"><a href="#粒子特效" class="headerlink" title="粒子特效"></a><strong>粒子特效</strong></h4><p>canvas-<a href="https://so.csdn.net/so/search?q=nest&spm=1001.2101.3001.7020">nest</a>，也就是 <code>canva-nest.js</code>，我们可以通过它实现粒子特效，效果如下</p><p><img src="https://img.ssf-blog.icu/file/4ad309979c75d09d80405.gif"></p><p>同样，在服务器上找到 WordPress 站点目录，如笔者的是 <code>/www/wwwroot/[站点文件名]</code></p><p>再在目录底下找到 <code>wp-content/themes/[WordPress使用的主题名称]/footer.php</code></p><p>在 <code>&lt;/body&gt;</code> 之前添加下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--canvas-nest show start--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; color=&quot;0,205,205&quot; opacity=&#x27;0.7&#x27; zIndex=&quot;-2&quot; count=&quot;99&quot; </span><br><span class="line">src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--canvas-nest show end--&gt;</span><br></pre></td></tr></table></figure><ul><li>color 参数为背景粒子线颜色值</li><li>opacity 参数为背景粒子线的透明度</li><li>count 参数为背景粒子线的密度。友情提醒，太大容易导致页面卡死</li></ul><h3 id="给网站增加离开页面改变网站标题效果"><a href="#给网站增加离开页面改变网站标题效果" class="headerlink" title="给网站增加离开页面改变网站标题效果"></a>给网站增加离开页面改变网站标题效果</h3><p>把下面代码放入<code>&lt;head&gt;&lt;/head&gt;</code>之间即可，其中的“有一条新消息,先森快回来吖~~”改为想要的文字就成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">document.addEventListener(&#x27;visibilitychange&#x27;, function () &#123;</span><br><span class="line">if (document.visibilityState == &#x27;hidden&#x27;) &#123;</span><br><span class="line">normal_title = document.title;</span><br><span class="line">document.title = &#x27;有一条新消息,先森快回来吖~~&#x27;;</span><br><span class="line">&#125; else document.title = normal_title;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="压缩一下"><a href="#压缩一下" class="headerlink" title="压缩一下"></a>压缩一下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   document.addEventListener(&#x27;visibilitychange&#x27;,function()&#123;if(document.visibilityState==&#x27;hidden&#x27;)&#123;normal_title=document.title;document.title=&#x27;有一条新消息,先森快回来吖~~&#x27;;&#125;else&#123;document.title=normal_title;&#125;&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>本文转自<a href="https://cloud.tencent.com/developer/article/2063776">https://cloud.tencent.com/developer/article/2063776</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站美化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法总结</title>
      <link href="/2024/06/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2024/06/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/7.png"></p><ul><li>为了绝对的速度选快排</li><li>为了省空间选堆排</li><li>为了稳定性选归并</li></ul><p>插入排序<code>O(N^2)</code>，但是常数项小；快速排序<code>O(NlogN)</code>，但是常数项高。也就是N很大的时候，采用快排；当N比较小的时候，采用插排。</p><p>Java中Arrays.sort()方法，如果传入的是基础类型，系统是采用快排进行排序的（因为此时的稳定性是无意义的，而快排比堆排更快）；如果传入的是非基础类型，系统是采用归并排序进行排序的（因为此时可能是需要稳定性的）。不管是快速排序还是归并排序，在二分的时候小于<code>_**32**_</code>的数据量依旧会使用二分插入排序。</p><h2 id="1、冒泡排序：相邻交换"><a href="#1、冒泡排序：相邻交换" class="headerlink" title="1、冒泡排序：相邻交换"></a>1、冒泡排序：相邻交换</h2><ul><li>时间复杂度：O(N^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><p>冒泡排序是一种交换排序，核心是冒泡，把数组中最小的那个往上冒，冒的过程就是和他相邻的元素交换。</p><p>冒泡排序有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。</p><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/1.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用循环实现冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line"> </span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归实现冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] array, <span class="type">int</span> lastIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 排序完成</span></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 依次交换元素的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lastIndex; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">element1</span> <span class="operator">=</span> array[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">element2</span> <span class="operator">=</span> array[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (element1 &gt; element2) &#123;</span><br><span class="line">            <span class="comment">// 交换两个元素的位置</span></span><br><span class="line">            array[i] = element2;</span><br><span class="line">            array[i + <span class="number">1</span>] = element1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序未完成，递归排序</span></span><br><span class="line">    <span class="keyword">return</span> bubbleSort(array, lastIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、选择排序：找到最大或最小交换"><a href="#2、选择排序：找到最大或最小交换" class="headerlink" title="2、选择排序：找到最大或最小交换"></a>2、选择排序：找到最大或最小交换</h2><ul><li>时间复杂度：O(N^2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/2.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    <span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class="line">            <span class="keyword">if</span> (i != min) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[min];</span><br><span class="line">                arr[min] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、插入排序：找到最大或最小插入"><a href="#3、插入排序：找到最大或最小插入" class="headerlink" title="3、插入排序：找到最大或最小插入"></a>3、插入排序：找到最大或最小插入</h2><ul><li>时间复杂度：O(N^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><p>插入排序的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>当数据基本有序时，采用插入排序可以明显减少数据交换和数据移动次数，进而提升排序效率。 可以将插入排序作为快速排序的补充，用于少量元素的排序。</p><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/3%20%281%29.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 记录要插入的数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; tmp &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 存在比其小的数，插入</span></span><br><span class="line">            <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、快速排序（递归）"><a href="#4、快速排序（递归）" class="headerlink" title="4、快速排序（递归）"></a>4、快速排序（递归）</h2><ul><li>时间复杂度：O(NlogN)</li><li>空间复杂度：O(logN)</li><li>稳定性：不稳定</li></ul><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/4.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] quickSort(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">partitionIndex</span> <span class="operator">=</span> partition(arr, left, right);</span><br><span class="line">            quickSort(arr, left, partitionIndex - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, partitionIndex + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> pivot + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">                swap(arr, i, index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、归并排序（递归）"><a href="#5、归并排序（递归）" class="headerlink" title="5、归并排序（递归）"></a>5、归并排序（递归）</h2><ul><li>时间复杂度：O(NlogN)</li><li>空间复杂度：O(N)</li><li>稳定性：稳定</li></ul><p>空间复杂度O(N)使得在数据量特别大的时候（例如，1千万数据）几乎不可接受。</p><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/5.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(arr.length / <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, middle);</span><br><span class="line">        <span class="type">int</span>[] right = Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> merge(sort(left), sort(right));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span>[] merge(<span class="type">int</span>[] left, <span class="type">int</span>[] right) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[left.length + right.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">                result[i++] = left[<span class="number">0</span>];</span><br><span class="line">                left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[i++] = right[<span class="number">0</span>];</span><br><span class="line">                right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result[i++] = left[<span class="number">0</span>];</span><br><span class="line">            left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result[i++] = right[<span class="number">0</span>];</span><br><span class="line">            right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、堆排序"><a href="#6、堆排序" class="headerlink" title="6、堆排序"></a>6、堆排序</h2><ul><li>时间复杂度：O(NlogN)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><p>堆排序就是把大顶堆堆顶的最大数取出，将剩余的堆继续调整为最大堆，再次将堆顶的最大数取出，这个过程持续到剩余数只有一个时结束。</p><p>解决“前N大的数”一类问题时，几乎是首选算法。</p><p><img src="https://ssfvlog.oss-cn-chengdu.aliyuncs.com/blog/6%20%282%29.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line"> </span><br><span class="line">        buildMaxHeap(arr, len);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, i);</span><br><span class="line">            len--;</span><br><span class="line">            heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(arr, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> i;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = left;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = right;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">            swap(arr, i, largest);</span><br><span class="line">            heapify(arr, largest, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
